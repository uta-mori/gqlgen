<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recipes on gqlgen</title><link>https://gqlgen.com/recipes/</link><description>Recent content in Recipes on gqlgen</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://gqlgen.com/recipes/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Apollo federation gqlgen</title><link>https://gqlgen.com/recipes/federation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gqlgen.com/recipes/federation/</guid><description>In this quick guide we are going to implement the example Apollo Federation server in gqlgen. You can find the finished result in the examples directory.
Enable federation Uncomment federation configuration in your gqlgen.yml
# Uncomment to enable federationfederation:filename:graph/generated/federation.gopackage:generatedCreate the federated servers For each server to be federated we will create a new gqlgen project.
go run github.com/99designs/gqlgen Update the schema to reflect the federated example
typeReview{body:Stringauthor:User@provides(fields:&amp;#34;username&amp;#34;)product:Product}extendtypeUser@key(fields:&amp;#34;id&amp;#34;){id:ID!@externalreviews:[Review]}extendtypeProduct@key(fields:&amp;#34;upc&amp;#34;){upc:String!@externalreviews:[Review]}and regenerate
go run github.</description></item><item><title>Providing authentication details through context</title><link>https://gqlgen.com/recipes/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gqlgen.com/recipes/authentication/</guid><description>We have an app where users are authenticated using a cookie in the HTTP request, and we want to check this authentication status somewhere in our graph. Because GraphQL is transport agnostic we can&amp;rsquo;t assume there will even be an HTTP request, so we need to expose these authentication details to our graph using a middleware.
package auth import ( &amp;#34;database/sql&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;context&amp;#34; ) // A private key for context that only this package can access.</description></item><item><title>Setting CORS headers using rs/cors for gqlgen</title><link>https://gqlgen.com/recipes/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gqlgen.com/recipes/cors/</guid><description>Cross-Origin Resource Sharing (CORS) headers are required when your graphql server lives on a different domain to the one your client code is served. You can read more about CORS in the MDN docs.
rs/cors gqlgen doesn&amp;rsquo;t include a CORS implementation, but it is built to work with all standard http middleware. Here we are going to use the fantastic chi and rs/cors to build our server.
package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.</description></item><item><title>Using Gin to setup HTTP handlers</title><link>https://gqlgen.com/recipes/gin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gqlgen.com/recipes/gin/</guid><description>Gin is an excellent alternative for the net/http router. From their official GitHub page:
Gin is a web framework written in Go (Golang). It features a martini-like API with much better performance, up to 40 times faster thanks to httprouter. If you need performance and good productivity, you will love Gin.
Here are the steps to setup Gin and gqlgen together:
Install Gin:
$ go get github.com/gin-gonic/gin In your router file, define the handlers for the GraphQL and Playground endpoints in two different methods and tie then together in the Gin router:</description></item><item><title>Migrating to 0.11</title><link>https://gqlgen.com/recipes/migration-0.11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gqlgen.com/recipes/migration-0.11/</guid><description>Updated gqlparser gqlparser had a breaking change, if you have any references to it in your project your going to need to update them from github.com/vektah/gqlparser to github.com/vektah/gqlparser/v2.
sed -i &amp;#39;s/github.com\/vektah\/gqlparser/github.com\/vektah\/gqlparser\/v2/&amp;#39; $(find -name &amp;#39;*.go&amp;#39;) Handler Refactor The handler package has grown organically for a long time, 0.11 is a large cleanup of the handler package to make it more modular and easier to maintain once we get to 1.0.
Transports Transports are the first thing that run, they handle decoding the incoming http request, and encoding the graphql response.</description></item><item><title>Allowing mutation of generated models before rendering</title><link>https://gqlgen.com/recipes/modelgen-hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gqlgen.com/recipes/modelgen-hook/</guid><description>The following recipe shows how to use a modelgen plugin hook to mutate generated models before they are rendered into a resulting file. This feature has many uses but the example focuses only on inserting ORM-specific tags into generated struct fields. This is a common use case since it allows for better field matching of DB queries and the generated data structure.
First of all, we need to create a function that will mutate the generated model.</description></item></channel></rss>